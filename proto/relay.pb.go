// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relay.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PeerType int32

const (
	PeerType_SERVER   PeerType = 0
	PeerType_CLIENT   PeerType = 1
	PeerType_DISCOVER PeerType = 2
)

var PeerType_name = map[int32]string{
	0: "SERVER",
	1: "CLIENT",
	2: "DISCOVER",
}
var PeerType_value = map[string]int32{
	"SERVER":   0,
	"CLIENT":   1,
	"DISCOVER": 2,
}

func (x PeerType) String() string {
	return proto.EnumName(PeerType_name, int32(x))
}
func (PeerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

type HandshakeRequest struct {
	// Either server or client or discover.
	PeerType PeerType `protobuf:"varint,1,opt,name=peerType,enum=sonm.PeerType" json:"peerType,omitempty"`
	// Addr represents a common Ethereum address both peers are connecting
	// around.
	// In case of servers it's their own id. Must be signed. In case of
	// clients - it's the target server id.
	//
	// In case of discovery requests this field has special meaning.
	// Both client and server must discover the same relay server to be able to
	// meet each other. At this stage there is no parameter verification.
	// It is done in the Handshake method.
	Addr []byte `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// Signature for ETH address.
	// Should be empty for clients.
	Sign []byte `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	// Optional connection id.
	// It is used when a client wants to connect to a specific server avoiding
	// random select.
	// Should be empty for servers.
	UUID string `protobuf:"bytes,4,opt,name=UUID" json:"UUID,omitempty"`
}

func (m *HandshakeRequest) Reset()                    { *m = HandshakeRequest{} }
func (m *HandshakeRequest) String() string            { return proto.CompactTextString(m) }
func (*HandshakeRequest) ProtoMessage()               {}
func (*HandshakeRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *HandshakeRequest) GetPeerType() PeerType {
	if m != nil {
		return m.PeerType
	}
	return PeerType_SERVER
}

func (m *HandshakeRequest) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *HandshakeRequest) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *HandshakeRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type DiscoverResponse struct {
	// Addr represents network address in form "host:port".
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *DiscoverResponse) Reset()                    { *m = DiscoverResponse{} }
func (m *DiscoverResponse) String() string            { return proto.CompactTextString(m) }
func (*DiscoverResponse) ProtoMessage()               {}
func (*DiscoverResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *DiscoverResponse) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type HandshakeResponse struct {
	// Error describes an error number.
	// Zero value means that there is no error.
	Error int32 `protobuf:"varint,1,opt,name=error" json:"error,omitempty"`
	// Description describes an error above.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *HandshakeResponse) Reset()                    { *m = HandshakeResponse{} }
func (m *HandshakeResponse) String() string            { return proto.CompactTextString(m) }
func (*HandshakeResponse) ProtoMessage()               {}
func (*HandshakeResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *HandshakeResponse) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *HandshakeResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*HandshakeRequest)(nil), "sonm.HandshakeRequest")
	proto.RegisterType((*DiscoverResponse)(nil), "sonm.DiscoverResponse")
	proto.RegisterType((*HandshakeResponse)(nil), "sonm.HandshakeResponse")
	proto.RegisterEnum("sonm.PeerType", PeerType_name, PeerType_value)
}

func init() { proto.RegisterFile("relay.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0x80, 0xcd, 0xec, 0x46, 0xf7, 0x36, 0x46, 0x0d, 0x1e, 0x7a, 0x2c, 0x3d, 0x48, 0xd9, 0xa1,
	0x88, 0xfe, 0x84, 0xb5, 0x60, 0x51, 0x54, 0xde, 0x36, 0xef, 0x75, 0x7d, 0x68, 0x51, 0x93, 0x98,
	0x57, 0x85, 0xf9, 0xeb, 0x25, 0xcd, 0x74, 0xbd, 0x7d, 0xf9, 0xde, 0x47, 0x78, 0x09, 0xcc, 0x2c,
	0xbd, 0xd7, 0xfb, 0xdc, 0x58, 0xdd, 0x69, 0x19, 0xb0, 0x56, 0x1f, 0xe9, 0x0f, 0x44, 0x37, 0xb5,
	0x6a, 0xf8, 0xb5, 0x7e, 0x23, 0xa4, 0xcf, 0x2f, 0xe2, 0x4e, 0x2e, 0x21, 0x34, 0x44, 0x76, 0xb3,
	0x37, 0x14, 0x8b, 0x44, 0x64, 0x8b, 0xab, 0x45, 0xee, 0xe2, 0xfc, 0xf1, 0x60, 0xf1, 0x7f, 0x2e,
	0x25, 0x04, 0x75, 0xd3, 0xd8, 0x78, 0x94, 0x88, 0x6c, 0x8e, 0x3d, 0x3b, 0xc7, 0xed, 0x8b, 0x8a,
	0x4f, 0xbd, 0x73, 0xec, 0xdc, 0x76, 0x5b, 0x15, 0x71, 0x90, 0x88, 0x6c, 0x8a, 0x3d, 0xa7, 0x17,
	0x10, 0x15, 0x2d, 0xef, 0xf4, 0x37, 0x59, 0x24, 0x36, 0x5a, 0xf1, 0xf1, 0x3e, 0xe1, 0x3b, 0xc7,
	0xe9, 0x2d, 0x9c, 0x0d, 0x76, 0x3c, 0x84, 0xe7, 0x30, 0x26, 0x6b, 0xb5, 0x2f, 0xc7, 0xe8, 0x0f,
	0x32, 0x81, 0x59, 0x43, 0xbc, 0xb3, 0xad, 0xe9, 0x5a, 0xad, 0xfa, 0xad, 0xa6, 0x38, 0x54, 0xcb,
	0x4b, 0x08, 0xff, 0x9e, 0x21, 0x01, 0x26, 0xeb, 0x12, 0x9f, 0x4a, 0x8c, 0x4e, 0x1c, 0xaf, 0xee,
	0xaa, 0xf2, 0x7e, 0x13, 0x09, 0x39, 0x87, 0xb0, 0xa8, 0xd6, 0xab, 0x07, 0x37, 0x19, 0x3d, 0x4f,
	0xfa, 0xff, 0xba, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x86, 0x10, 0x90, 0xbf, 0x3e, 0x01, 0x00,
	0x00,
}
